def find_squares(img):
    img = cv2.GaussianBlur(img, (5, 5), 0)	 	    img = cv2.GaussianBlur(img, (5, 5), 0)
    squares = []	 	    squares = []
    for gray in cv2.split(img):	 	    for gray in cv2.split(img):
        for thrs in xrange(0, 255, 26):	 	        for thrs in xrange(0, 255, 26):
            if thrs == 0:	 	            if thrs == 0:
                bin = cv2.Canny(gray, 0, 50, apertureSize=5)	 	                bin = cv2.Canny(gray, 0, 50, apertureSize=5)
                bin = cv2.dilate(bin, None)	 	                bin = cv2.dilate(bin, None)
            else:	 	            else:
                retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)	 	                retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)
            contours, hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.CHAIN
_APPROX_SIMPLE)	 	            bin, contours, hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.
CHAIN_APPROX_SIMPLE)
            for cnt in contours:	 	            for cnt in contours:
                cnt_len = cv2.arcLength(cnt, True)	 	                cnt_len = cv2.arcLength(cnt, True)
                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)	 	                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)
                if len(cnt) == 4 and cv2.contourArea(cnt) > 1000 and cv2.isConto
urConvex(cnt):	 	                if len(cnt) == 4 and cv2.contourArea(cnt) > 1000 and cv2.isConto
urConvex(cnt):
                    cnt = cnt.reshape(-1, 2)	 	                    cnt = cnt.reshape(-1, 2)
                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+
2) % 4] ) for i in xrange(4)])	 	                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+
2) % 4] ) for i in xrange(4)])
                    if max_cos < 0.1:	 	                    if max_cos < 0.1:
                        squares.append(cnt)	 	                        squares.append(cnt)
    return squares	 	    return squares
 	
if __name__ == '__main__':	 	if __name__ == '__main__':
    from glob import glob	 	    from glob import glob
    for fn in glob('../cpp/pic*.png'):	 	    for fn in glob('../data/pic*.png'):
        img = cv2.imread(fn)	 	        img = cv2.imread(fn)
        squares = find_squares(img)	 	        squares = find_squares(img)
        cv2.drawContours( img, squares, -1, (0, 255, 0), 3 )	 	        cv2.drawContours( img, squares, -1, (0, 255, 0), 3 )
        cv2.imshow('squares', img)	 	        cv2.imshow('squares', img)
        ch = 0xFF & cv2.waitKey()	 	        ch = 0xFF & cv2.waitKey()
        if ch == 27:	 	        if ch == 27:
            break	 	            break
    cv2.destroyAllWindows()	 	    cv2.destroyAllWindows()
